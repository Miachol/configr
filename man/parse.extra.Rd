% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parse.R
\name{parse.extra}
\alias{parse.extra}
\title{Parse the configuration {{var}} format, and replace it by extra.list values}
\usage{
parse.extra(
  config,
  extra.list = list(),
  other.config = "",
  rcmd.parse = FALSE,
  bash.parse = FALSE,
  glue.parse = FALSE,
  glue.flag = "!!glue",
  global.vars.field = "global_vars"
)
}
\arguments{
\item{config}{A list that were generated by read.config/eval.config/eval.config.merge}

\item{extra.list}{A list that can replace the configuration file '{{debug}}' by list(debug = TRUE), and {{debug}} will be setted to TRUE}

\item{other.config}{Path of another configuration file that can replace the configuration file '{{key:value}}'}

\item{rcmd.parse}{Logical wheather parse '@>@str_replace('abc', 'b', 'c')@<@' in config to 'acc'}

\item{bash.parse}{Logical wheather parse '#>#echo $HOME#<#' in config to your HOME PATH}

\item{glue.parse}{Logical wheather parse '!!glue{1:5}' in config to ['1','2','3','4','5']; 
['nochange', '!!glue(1:5)', 'nochange'] => ['nochange', '1', '2', '3', '4', '5', 'nochange']}

\item{glue.flag}{A character flag indicating wheater run glue() function to parse (Default is !!glue)}

\item{global.vars.field}{All vars defined in global.vars.field will as the extra.list params [gloval_var]}
}
\value{
A list
}
\description{
Parse the configuration {{var}} format, and replace it by extra.list values
}
\examples{
config.json <- system.file('extdata', 'config.json', package='configr')
config.other <- system.file('extdata', 'config.other.yaml', package='configr')
config <- read.config(config.json)
parse.extra(config, list(debug = 'TRUE'))
parse.extra(config, list(debug = 'TRUE'), other.config = config.other)
parse.extra(config, list(debug = 'TRUE'), other.config = config.other, 
rcmd.parse = TRUE)
parse.extra(config, list(debug = 'TRUE'), other.config = config.other, 
rcmd.parse = TRUE, bash.parse = TRUE)

raw <- c('a', '!!glue{1:5}', 'c')
expect.parsed.1 <- c('a', '1', '2', '3', '4', '5', 'c')
list.raw <- list(glue = raw, nochange = 1:10)
parsed <- parse.extra(list.raw, glue.parse = TRUE)

raw <- c('!!glue_numeric{1:5}')
expect.parsed.1 <- c(1, 2, 3, 4, 5)
list.raw <- list(glue = raw, nochange = 1:10)
parsed <- parse.extra(list.raw, glue.parse = TRUE)
}
